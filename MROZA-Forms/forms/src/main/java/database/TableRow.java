package database;

import java.util.List;
import database.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table TABLE_ROW.
 */
public class TableRow {

    private Long id;
    private String value;
    private Integer inOrder;
    private long tableId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TableRowDao myDao;

    private TableTemplate tableTemplate;
    private Long tableTemplate__resolvedKey;

    private List<TableField> tableFieldList;

    public TableRow() {
    }

    public TableRow(Long id) {
        this.id = id;
    }

    public TableRow(Long id, String value, Integer inOrder, long tableId) {
        this.id = id;
        this.value = value;
        this.inOrder = inOrder;
        this.tableId = tableId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTableRowDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getValue() {
        return value;
    }

    public void setValue(String value) {
        this.value = value;
    }

    public Integer getInOrder() {
        return inOrder;
    }

    public void setInOrder(Integer inOrder) {
        this.inOrder = inOrder;
    }

    public long getTableId() {
        return tableId;
    }

    public void setTableId(long tableId) {
        this.tableId = tableId;
    }

    /** To-one relationship, resolved on first access. */
    public TableTemplate getTableTemplate() {
        long __key = this.tableId;
        if (tableTemplate__resolvedKey == null || !tableTemplate__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TableTemplateDao targetDao = daoSession.getTableTemplateDao();
            TableTemplate tableTemplateNew = targetDao.load(__key);
            synchronized (this) {
                tableTemplate = tableTemplateNew;
            	tableTemplate__resolvedKey = __key;
            }
        }
        return tableTemplate;
    }

    public void setTableTemplate(TableTemplate tableTemplate) {
        if (tableTemplate == null) {
            throw new DaoException("To-one property 'tableId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.tableTemplate = tableTemplate;
            tableId = tableTemplate.getId();
            tableTemplate__resolvedKey = tableId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<TableField> getTableFieldList() {
        if (tableFieldList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TableFieldDao targetDao = daoSession.getTableFieldDao();
            List<TableField> tableFieldListNew = targetDao._queryTableRow_TableFieldList(id);
            synchronized (this) {
                if(tableFieldList == null) {
                    tableFieldList = tableFieldListNew;
                }
            }
        }
        return tableFieldList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTableFieldList() {
        tableFieldList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
