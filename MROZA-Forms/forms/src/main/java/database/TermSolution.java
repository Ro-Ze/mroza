package database;

import java.util.List;
import database.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table TERM_SOLUTION.
 */
public class TermSolution {

    private Long id;
    private java.util.Date startDate;
    private java.util.Date endDate;
    private long childId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TermSolutionDao myDao;

    private Child child;
    private Long child__resolvedKey;

    private List<ChildTable> childTable;

    public TermSolution() {
    }

    public TermSolution(Long id) {
        this.id = id;
    }

    public TermSolution(Long id, java.util.Date startDate, java.util.Date endDate, long childId) {
        this.id = id;
        this.startDate = startDate;
        this.endDate = endDate;
        this.childId = childId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTermSolutionDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public java.util.Date getStartDate() {
        return startDate;
    }

    public void setStartDate(java.util.Date startDate) {
        this.startDate = startDate;
    }

    public java.util.Date getEndDate() {
        return endDate;
    }

    public void setEndDate(java.util.Date endDate) {
        this.endDate = endDate;
    }

    public long getChildId() {
        return childId;
    }

    public void setChildId(long childId) {
        this.childId = childId;
    }

    /** To-one relationship, resolved on first access. */
    public Child getChild() {
        long __key = this.childId;
        if (child__resolvedKey == null || !child__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ChildDao targetDao = daoSession.getChildDao();
            Child childNew = targetDao.load(__key);
            synchronized (this) {
                child = childNew;
            	child__resolvedKey = __key;
            }
        }
        return child;
    }

    public void setChild(Child child) {
        if (child == null) {
            throw new DaoException("To-one property 'childId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.child = child;
            childId = child.getId();
            child__resolvedKey = childId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<ChildTable> getChildTable() {
        if (childTable == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ChildTableDao targetDao = daoSession.getChildTableDao();
            List<ChildTable> childTableNew = targetDao._queryTermSolution_ChildTable(id);
            synchronized (this) {
                if(childTable == null) {
                    childTable = childTableNew;
                }
            }
        }
        return childTable;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetChildTable() {
        childTable = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
