package database;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import database.ChildTable;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CHILD_TABLE.
*/
public class ChildTableDao extends AbstractDao<ChildTable, Long> {

    public static final String TABLENAME = "CHILD_TABLE";

    /**
     * Properties of entity ChildTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IsTeachingCollected = new Property(1, boolean.class, "isTeachingCollected", false, "IS_TEACHING_COLLECTED");
        public final static Property IsGeneralizationCollected = new Property(2, boolean.class, "isGeneralizationCollected", false, "IS_GENERALIZATION_COLLECTED");
        public final static Property IsTeachingFinished = new Property(3, boolean.class, "isTeachingFinished", false, "IS_TEACHING_FINISHED");
        public final static Property IsGeneralizationFinished = new Property(4, boolean.class, "isGeneralizationFinished", false, "IS_GENERALIZATION_FINISHED");
        public final static Property Note = new Property(5, String.class, "note", false, "NOTE");
        public final static Property IsIOA = new Property(6, boolean.class, "isIOA", false, "IS_IOA");
        public final static Property IsPretest = new Property(7, boolean.class, "isPretest", false, "IS_PRETEST");
        public final static Property TeachingFillOutDate = new Property(8, java.util.Date.class, "teachingFillOutDate", false, "TEACHING_FILL_OUT_DATE");
        public final static Property GeneralizationFillOutDate = new Property(9, java.util.Date.class, "generalizationFillOutDate", false, "GENERALIZATION_FILL_OUT_DATE");
        public final static Property LastEditDate = new Property(10, java.util.Date.class, "lastEditDate", false, "LAST_EDIT_DATE");
        public final static Property TableId = new Property(11, long.class, "tableId", false, "TABLE_ID");
        public final static Property TermSolutionId = new Property(12, long.class, "termSolutionId", false, "TERM_SOLUTION_ID");
    };

    private DaoSession daoSession;

    private Query<ChildTable> tableTemplate_ChildTableListQuery;
    private Query<ChildTable> termSolution_ChildTableQuery;

    public ChildTableDao(DaoConfig config) {
        super(config);
    }
    
    public ChildTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CHILD_TABLE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'IS_TEACHING_COLLECTED' INTEGER NOT NULL ," + // 1: isTeachingCollected
                "'IS_GENERALIZATION_COLLECTED' INTEGER NOT NULL ," + // 2: isGeneralizationCollected
                "'IS_TEACHING_FINISHED' INTEGER NOT NULL ," + // 3: isTeachingFinished
                "'IS_GENERALIZATION_FINISHED' INTEGER NOT NULL ," + // 4: isGeneralizationFinished
                "'NOTE' TEXT," + // 5: note
                "'IS_IOA' INTEGER NOT NULL ," + // 6: isIOA
                "'IS_PRETEST' INTEGER NOT NULL ," + // 7: isPretest
                "'TEACHING_FILL_OUT_DATE' INTEGER," + // 8: teachingFillOutDate
                "'GENERALIZATION_FILL_OUT_DATE' INTEGER," + // 9: generalizationFillOutDate
                "'LAST_EDIT_DATE' INTEGER," + // 10: lastEditDate
                "'TABLE_ID' INTEGER NOT NULL ," + // 11: tableId
                "'TERM_SOLUTION_ID' INTEGER NOT NULL );"); // 12: termSolutionId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CHILD_TABLE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ChildTable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getIsTeachingCollected() ? 1l: 0l);
        stmt.bindLong(3, entity.getIsGeneralizationCollected() ? 1l: 0l);
        stmt.bindLong(4, entity.getIsTeachingFinished() ? 1l: 0l);
        stmt.bindLong(5, entity.getIsGeneralizationFinished() ? 1l: 0l);
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(6, note);
        }
        stmt.bindLong(7, entity.getIsIOA() ? 1l: 0l);
        stmt.bindLong(8, entity.getIsPretest() ? 1l: 0l);
 
        java.util.Date teachingFillOutDate = entity.getTeachingFillOutDate();
        if (teachingFillOutDate != null) {
            stmt.bindLong(9, teachingFillOutDate.getTime());
        }
 
        java.util.Date generalizationFillOutDate = entity.getGeneralizationFillOutDate();
        if (generalizationFillOutDate != null) {
            stmt.bindLong(10, generalizationFillOutDate.getTime());
        }
 
        java.util.Date lastEditDate = entity.getLastEditDate();
        if (lastEditDate != null) {
            stmt.bindLong(11, lastEditDate.getTime());
        }
        stmt.bindLong(12, entity.getTableId());
        stmt.bindLong(13, entity.getTermSolutionId());
    }

    @Override
    protected void attachEntity(ChildTable entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ChildTable readEntity(Cursor cursor, int offset) {
        ChildTable entity = new ChildTable( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getShort(offset + 1) != 0, // isTeachingCollected
            cursor.getShort(offset + 2) != 0, // isGeneralizationCollected
            cursor.getShort(offset + 3) != 0, // isTeachingFinished
            cursor.getShort(offset + 4) != 0, // isGeneralizationFinished
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // note
            cursor.getShort(offset + 6) != 0, // isIOA
            cursor.getShort(offset + 7) != 0, // isPretest
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // teachingFillOutDate
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)), // generalizationFillOutDate
            cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)), // lastEditDate
            cursor.getLong(offset + 11), // tableId
            cursor.getLong(offset + 12) // termSolutionId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ChildTable entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIsTeachingCollected(cursor.getShort(offset + 1) != 0);
        entity.setIsGeneralizationCollected(cursor.getShort(offset + 2) != 0);
        entity.setIsTeachingFinished(cursor.getShort(offset + 3) != 0);
        entity.setIsGeneralizationFinished(cursor.getShort(offset + 4) != 0);
        entity.setNote(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsIOA(cursor.getShort(offset + 6) != 0);
        entity.setIsPretest(cursor.getShort(offset + 7) != 0);
        entity.setTeachingFillOutDate(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setGeneralizationFillOutDate(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
        entity.setLastEditDate(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
        entity.setTableId(cursor.getLong(offset + 11));
        entity.setTermSolutionId(cursor.getLong(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ChildTable entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ChildTable entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "childTableList" to-many relationship of TableTemplate. */
    public List<ChildTable> _queryTableTemplate_ChildTableList(long tableId) {
        synchronized (this) {
            if (tableTemplate_ChildTableListQuery == null) {
                QueryBuilder<ChildTable> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.TableId.eq(null));
                tableTemplate_ChildTableListQuery = queryBuilder.build();
            }
        }
        Query<ChildTable> query = tableTemplate_ChildTableListQuery.forCurrentThread();
        query.setParameter(0, tableId);
        return query.list();
    }

    /** Internal query to resolve the "childTable" to-many relationship of TermSolution. */
    public List<ChildTable> _queryTermSolution_ChildTable(long termSolutionId) {
        synchronized (this) {
            if (termSolution_ChildTableQuery == null) {
                QueryBuilder<ChildTable> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.TermSolutionId.eq(null));
                termSolution_ChildTableQuery = queryBuilder.build();
            }
        }
        Query<ChildTable> query = termSolution_ChildTableQuery.forCurrentThread();
        query.setParameter(0, termSolutionId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getTableTemplateDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getTermSolutionDao().getAllColumns());
            builder.append(" FROM CHILD_TABLE T");
            builder.append(" LEFT JOIN TABLE_TEMPLATE T0 ON T.'TABLE_ID'=T0.'_id'");
            builder.append(" LEFT JOIN TERM_SOLUTION T1 ON T.'TERM_SOLUTION_ID'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected ChildTable loadCurrentDeep(Cursor cursor, boolean lock) {
        ChildTable entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        TableTemplate tableTemplate = loadCurrentOther(daoSession.getTableTemplateDao(), cursor, offset);
         if(tableTemplate != null) {
            entity.setTableTemplate(tableTemplate);
        }
        offset += daoSession.getTableTemplateDao().getAllColumns().length;

        TermSolution termSolution = loadCurrentOther(daoSession.getTermSolutionDao(), cursor, offset);
         if(termSolution != null) {
            entity.setTermSolution(termSolution);
        }

        return entity;    
    }

    public ChildTable loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<ChildTable> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<ChildTable> list = new ArrayList<ChildTable>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<ChildTable> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<ChildTable> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
