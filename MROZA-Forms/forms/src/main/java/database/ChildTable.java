package database;

import java.util.List;
import database.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table CHILD_TABLE.
 */
public class ChildTable {

    private Long id;
    private boolean isTeachingCollected;
    private boolean isGeneralizationCollected;
    private boolean isTeachingFinished;
    private boolean isGeneralizationFinished;
    private String note;
    private boolean isIOA;
    private boolean isPretest;
    private java.util.Date teachingFillOutDate;
    private java.util.Date generalizationFillOutDate;
    private java.util.Date lastEditDate;
    private long tableId;
    private long termSolutionId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ChildTableDao myDao;

    private TableTemplate tableTemplate;
    private Long tableTemplate__resolvedKey;

    private TermSolution termSolution;
    private Long termSolution__resolvedKey;

    private List<TableFieldFilling> tableFieldFilling;

    public ChildTable() {
    }

    public ChildTable(Long id) {
        this.id = id;
    }

    public ChildTable(Long id, boolean isTeachingCollected, boolean isGeneralizationCollected, boolean isTeachingFinished, boolean isGeneralizationFinished, String note, boolean isIOA, boolean isPretest, java.util.Date teachingFillOutDate, java.util.Date generalizationFillOutDate, java.util.Date lastEditDate, long tableId, long termSolutionId) {
        this.id = id;
        this.isTeachingCollected = isTeachingCollected;
        this.isGeneralizationCollected = isGeneralizationCollected;
        this.isTeachingFinished = isTeachingFinished;
        this.isGeneralizationFinished = isGeneralizationFinished;
        this.note = note;
        this.isIOA = isIOA;
        this.isPretest = isPretest;
        this.teachingFillOutDate = teachingFillOutDate;
        this.generalizationFillOutDate = generalizationFillOutDate;
        this.lastEditDate = lastEditDate;
        this.tableId = tableId;
        this.termSolutionId = termSolutionId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getChildTableDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public boolean getIsTeachingCollected() {
        return isTeachingCollected;
    }

    public void setIsTeachingCollected(boolean isTeachingCollected) {
        this.isTeachingCollected = isTeachingCollected;
    }

    public boolean getIsGeneralizationCollected() {
        return isGeneralizationCollected;
    }

    public void setIsGeneralizationCollected(boolean isGeneralizationCollected) {
        this.isGeneralizationCollected = isGeneralizationCollected;
    }

    public boolean getIsTeachingFinished() {
        return isTeachingFinished;
    }

    public void setIsTeachingFinished(boolean isTeachingFinished) {
        this.isTeachingFinished = isTeachingFinished;
    }

    public boolean getIsGeneralizationFinished() {
        return isGeneralizationFinished;
    }

    public void setIsGeneralizationFinished(boolean isGeneralizationFinished) {
        this.isGeneralizationFinished = isGeneralizationFinished;
    }

    public String getNote() {
        return note;
    }

    public void setNote(String note) {
        this.note = note;
    }

    public boolean getIsIOA() {
        return isIOA;
    }

    public void setIsIOA(boolean isIOA) {
        this.isIOA = isIOA;
    }

    public boolean getIsPretest() {
        return isPretest;
    }

    public void setIsPretest(boolean isPretest) {
        this.isPretest = isPretest;
    }

    public java.util.Date getTeachingFillOutDate() {
        return teachingFillOutDate;
    }

    public void setTeachingFillOutDate(java.util.Date teachingFillOutDate) {
        this.teachingFillOutDate = teachingFillOutDate;
    }

    public java.util.Date getGeneralizationFillOutDate() {
        return generalizationFillOutDate;
    }

    public void setGeneralizationFillOutDate(java.util.Date generalizationFillOutDate) {
        this.generalizationFillOutDate = generalizationFillOutDate;
    }

    public java.util.Date getLastEditDate() {
        return lastEditDate;
    }

    public void setLastEditDate(java.util.Date lastEditDate) {
        this.lastEditDate = lastEditDate;
    }

    public long getTableId() {
        return tableId;
    }

    public void setTableId(long tableId) {
        this.tableId = tableId;
    }

    public long getTermSolutionId() {
        return termSolutionId;
    }

    public void setTermSolutionId(long termSolutionId) {
        this.termSolutionId = termSolutionId;
    }

    /** To-one relationship, resolved on first access. */
    public TableTemplate getTableTemplate() {
        long __key = this.tableId;
        if (tableTemplate__resolvedKey == null || !tableTemplate__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TableTemplateDao targetDao = daoSession.getTableTemplateDao();
            TableTemplate tableTemplateNew = targetDao.load(__key);
            synchronized (this) {
                tableTemplate = tableTemplateNew;
            	tableTemplate__resolvedKey = __key;
            }
        }
        return tableTemplate;
    }

    public void setTableTemplate(TableTemplate tableTemplate) {
        if (tableTemplate == null) {
            throw new DaoException("To-one property 'tableId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.tableTemplate = tableTemplate;
            tableId = tableTemplate.getId();
            tableTemplate__resolvedKey = tableId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public TermSolution getTermSolution() {
        long __key = this.termSolutionId;
        if (termSolution__resolvedKey == null || !termSolution__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TermSolutionDao targetDao = daoSession.getTermSolutionDao();
            TermSolution termSolutionNew = targetDao.load(__key);
            synchronized (this) {
                termSolution = termSolutionNew;
            	termSolution__resolvedKey = __key;
            }
        }
        return termSolution;
    }

    public void setTermSolution(TermSolution termSolution) {
        if (termSolution == null) {
            throw new DaoException("To-one property 'termSolutionId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.termSolution = termSolution;
            termSolutionId = termSolution.getId();
            termSolution__resolvedKey = termSolutionId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<TableFieldFilling> getTableFieldFilling() {
        if (tableFieldFilling == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TableFieldFillingDao targetDao = daoSession.getTableFieldFillingDao();
            List<TableFieldFilling> tableFieldFillingNew = targetDao._queryChildTable_TableFieldFilling(id);
            synchronized (this) {
                if(tableFieldFilling == null) {
                    tableFieldFilling = tableFieldFillingNew;
                }
            }
        }
        return tableFieldFilling;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTableFieldFilling() {
        tableFieldFilling = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
