package database;

import android.database.sqlite.SQLiteDatabase;

import java.util.Map;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.AbstractDaoSession;
import de.greenrobot.dao.identityscope.IdentityScopeType;
import de.greenrobot.dao.internal.DaoConfig;

import database.SyncDate;
import database.Therapist;
import database.Child;
import database.TermSolution;
import database.Program;
import database.TableTemplate;
import database.TableRow;
import database.TableField;
import database.ChildTable;
import database.TableFieldFilling;

import database.SyncDateDao;
import database.TherapistDao;
import database.ChildDao;
import database.TermSolutionDao;
import database.ProgramDao;
import database.TableTemplateDao;
import database.TableRowDao;
import database.TableFieldDao;
import database.ChildTableDao;
import database.TableFieldFillingDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see de.greenrobot.dao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig syncDateDaoConfig;
    private final DaoConfig therapistDaoConfig;
    private final DaoConfig childDaoConfig;
    private final DaoConfig termSolutionDaoConfig;
    private final DaoConfig programDaoConfig;
    private final DaoConfig tableTemplateDaoConfig;
    private final DaoConfig tableRowDaoConfig;
    private final DaoConfig tableFieldDaoConfig;
    private final DaoConfig childTableDaoConfig;
    private final DaoConfig tableFieldFillingDaoConfig;

    private final SyncDateDao syncDateDao;
    private final TherapistDao therapistDao;
    private final ChildDao childDao;
    private final TermSolutionDao termSolutionDao;
    private final ProgramDao programDao;
    private final TableTemplateDao tableTemplateDao;
    private final TableRowDao tableRowDao;
    private final TableFieldDao tableFieldDao;
    private final ChildTableDao childTableDao;
    private final TableFieldFillingDao tableFieldFillingDao;

    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        syncDateDaoConfig = daoConfigMap.get(SyncDateDao.class).clone();
        syncDateDaoConfig.initIdentityScope(type);

        therapistDaoConfig = daoConfigMap.get(TherapistDao.class).clone();
        therapistDaoConfig.initIdentityScope(type);

        childDaoConfig = daoConfigMap.get(ChildDao.class).clone();
        childDaoConfig.initIdentityScope(type);

        termSolutionDaoConfig = daoConfigMap.get(TermSolutionDao.class).clone();
        termSolutionDaoConfig.initIdentityScope(type);

        programDaoConfig = daoConfigMap.get(ProgramDao.class).clone();
        programDaoConfig.initIdentityScope(type);

        tableTemplateDaoConfig = daoConfigMap.get(TableTemplateDao.class).clone();
        tableTemplateDaoConfig.initIdentityScope(type);

        tableRowDaoConfig = daoConfigMap.get(TableRowDao.class).clone();
        tableRowDaoConfig.initIdentityScope(type);

        tableFieldDaoConfig = daoConfigMap.get(TableFieldDao.class).clone();
        tableFieldDaoConfig.initIdentityScope(type);

        childTableDaoConfig = daoConfigMap.get(ChildTableDao.class).clone();
        childTableDaoConfig.initIdentityScope(type);

        tableFieldFillingDaoConfig = daoConfigMap.get(TableFieldFillingDao.class).clone();
        tableFieldFillingDaoConfig.initIdentityScope(type);

        syncDateDao = new SyncDateDao(syncDateDaoConfig, this);
        therapistDao = new TherapistDao(therapistDaoConfig, this);
        childDao = new ChildDao(childDaoConfig, this);
        termSolutionDao = new TermSolutionDao(termSolutionDaoConfig, this);
        programDao = new ProgramDao(programDaoConfig, this);
        tableTemplateDao = new TableTemplateDao(tableTemplateDaoConfig, this);
        tableRowDao = new TableRowDao(tableRowDaoConfig, this);
        tableFieldDao = new TableFieldDao(tableFieldDaoConfig, this);
        childTableDao = new ChildTableDao(childTableDaoConfig, this);
        tableFieldFillingDao = new TableFieldFillingDao(tableFieldFillingDaoConfig, this);

        registerDao(SyncDate.class, syncDateDao);
        registerDao(Therapist.class, therapistDao);
        registerDao(Child.class, childDao);
        registerDao(TermSolution.class, termSolutionDao);
        registerDao(Program.class, programDao);
        registerDao(TableTemplate.class, tableTemplateDao);
        registerDao(TableRow.class, tableRowDao);
        registerDao(TableField.class, tableFieldDao);
        registerDao(ChildTable.class, childTableDao);
        registerDao(TableFieldFilling.class, tableFieldFillingDao);
    }
    
    public void clear() {
        syncDateDaoConfig.getIdentityScope().clear();
        therapistDaoConfig.getIdentityScope().clear();
        childDaoConfig.getIdentityScope().clear();
        termSolutionDaoConfig.getIdentityScope().clear();
        programDaoConfig.getIdentityScope().clear();
        tableTemplateDaoConfig.getIdentityScope().clear();
        tableRowDaoConfig.getIdentityScope().clear();
        tableFieldDaoConfig.getIdentityScope().clear();
        childTableDaoConfig.getIdentityScope().clear();
        tableFieldFillingDaoConfig.getIdentityScope().clear();
    }

    public SyncDateDao getSyncDateDao() {
        return syncDateDao;
    }

    public TherapistDao getTherapistDao() {
        return therapistDao;
    }

    public ChildDao getChildDao() {
        return childDao;
    }

    public TermSolutionDao getTermSolutionDao() {
        return termSolutionDao;
    }

    public ProgramDao getProgramDao() {
        return programDao;
    }

    public TableTemplateDao getTableTemplateDao() {
        return tableTemplateDao;
    }

    public TableRowDao getTableRowDao() {
        return tableRowDao;
    }

    public TableFieldDao getTableFieldDao() {
        return tableFieldDao;
    }

    public ChildTableDao getChildTableDao() {
        return childTableDao;
    }

    public TableFieldFillingDao getTableFieldFillingDao() {
        return tableFieldFillingDao;
    }

}
