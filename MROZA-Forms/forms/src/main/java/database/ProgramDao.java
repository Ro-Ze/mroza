package database;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import database.Program;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PROGRAM.
*/
public class ProgramDao extends AbstractDao<Program, Long> {

    public static final String TABLENAME = "PROGRAM";

    /**
     * Properties of entity Program.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Symbol = new Property(1, String.class, "symbol", false, "SYMBOL");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Description = new Property(3, String.class, "description", false, "DESCRIPTION");
        public final static Property CreateDate = new Property(4, java.util.Date.class, "createDate", false, "CREATE_DATE");
        public final static Property IsFinished = new Property(5, boolean.class, "isFinished", false, "IS_FINISHED");
        public final static Property ChildId = new Property(6, Long.class, "childId", false, "CHILD_ID");
    };

    private DaoSession daoSession;

    private Query<Program> child_ProgramListQuery;

    public ProgramDao(DaoConfig config) {
        super(config);
    }
    
    public ProgramDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PROGRAM' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'SYMBOL' TEXT NOT NULL ," + // 1: symbol
                "'NAME' TEXT NOT NULL ," + // 2: name
                "'DESCRIPTION' TEXT," + // 3: description
                "'CREATE_DATE' INTEGER," + // 4: createDate
                "'IS_FINISHED' INTEGER NOT NULL ," + // 5: isFinished
                "'CHILD_ID' INTEGER);"); // 6: childId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PROGRAM'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Program entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getSymbol());
        stmt.bindString(3, entity.getName());
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(5, createDate.getTime());
        }
        stmt.bindLong(6, entity.getIsFinished() ? 1l: 0l);
 
        Long childId = entity.getChildId();
        if (childId != null) {
            stmt.bindLong(7, childId);
        }
    }

    @Override
    protected void attachEntity(Program entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Program readEntity(Cursor cursor, int offset) {
        Program entity = new Program( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // symbol
            cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // description
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // createDate
            cursor.getShort(offset + 5) != 0, // isFinished
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6) // childId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Program entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSymbol(cursor.getString(offset + 1));
        entity.setName(cursor.getString(offset + 2));
        entity.setDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreateDate(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setIsFinished(cursor.getShort(offset + 5) != 0);
        entity.setChildId(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Program entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Program entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "programList" to-many relationship of Child. */
    public List<Program> _queryChild_ProgramList(Long childId) {
        synchronized (this) {
            if (child_ProgramListQuery == null) {
                QueryBuilder<Program> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ChildId.eq(null));
                child_ProgramListQuery = queryBuilder.build();
            }
        }
        Query<Program> query = child_ProgramListQuery.forCurrentThread();
        query.setParameter(0, childId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getChildDao().getAllColumns());
            builder.append(" FROM PROGRAM T");
            builder.append(" LEFT JOIN CHILD T0 ON T.'CHILD_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Program loadCurrentDeep(Cursor cursor, boolean lock) {
        Program entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Child child = loadCurrentOther(daoSession.getChildDao(), cursor, offset);
        entity.setChild(child);

        return entity;    
    }

    public Program loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Program> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Program> list = new ArrayList<Program>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Program> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Program> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
