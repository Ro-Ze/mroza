package database;

import java.util.List;
import database.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table TABLE_FIELD.
 */
public class TableField {

    private Long id;
    private String type;
    private Integer inOrder;
    private long tableRowId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TableFieldDao myDao;

    private TableRow tableRow;
    private Long tableRow__resolvedKey;

    private List<TableFieldFilling> tableFieldFillingList;

    public TableField() {
    }

    public TableField(Long id) {
        this.id = id;
    }

    public TableField(Long id, String type, Integer inOrder, long tableRowId) {
        this.id = id;
        this.type = type;
        this.inOrder = inOrder;
        this.tableRowId = tableRowId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTableFieldDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public Integer getInOrder() {
        return inOrder;
    }

    public void setInOrder(Integer inOrder) {
        this.inOrder = inOrder;
    }

    public long getTableRowId() {
        return tableRowId;
    }

    public void setTableRowId(long tableRowId) {
        this.tableRowId = tableRowId;
    }

    /** To-one relationship, resolved on first access. */
    public TableRow getTableRow() {
        long __key = this.tableRowId;
        if (tableRow__resolvedKey == null || !tableRow__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TableRowDao targetDao = daoSession.getTableRowDao();
            TableRow tableRowNew = targetDao.load(__key);
            synchronized (this) {
                tableRow = tableRowNew;
            	tableRow__resolvedKey = __key;
            }
        }
        return tableRow;
    }

    public void setTableRow(TableRow tableRow) {
        if (tableRow == null) {
            throw new DaoException("To-one property 'tableRowId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.tableRow = tableRow;
            tableRowId = tableRow.getId();
            tableRow__resolvedKey = tableRowId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<TableFieldFilling> getTableFieldFillingList() {
        if (tableFieldFillingList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TableFieldFillingDao targetDao = daoSession.getTableFieldFillingDao();
            List<TableFieldFilling> tableFieldFillingListNew = targetDao._queryTableField_TableFieldFillingList(id);
            synchronized (this) {
                if(tableFieldFillingList == null) {
                    tableFieldFillingList = tableFieldFillingListNew;
                }
            }
        }
        return tableFieldFillingList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTableFieldFillingList() {
        tableFieldFillingList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
