package database;

import database.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table TABLE_FIELD_FILLING.
 */
public class TableFieldFilling {

    private Long id;
    private String content;
    private long tableFieldId;
    private long childTableId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TableFieldFillingDao myDao;

    private TableField tableField;
    private Long tableField__resolvedKey;

    private ChildTable childTable;
    private Long childTable__resolvedKey;


    public TableFieldFilling() {
    }

    public TableFieldFilling(Long id) {
        this.id = id;
    }

    public TableFieldFilling(Long id, String content, long tableFieldId, long childTableId) {
        this.id = id;
        this.content = content;
        this.tableFieldId = tableFieldId;
        this.childTableId = childTableId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTableFieldFillingDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }

    public long getTableFieldId() {
        return tableFieldId;
    }

    public void setTableFieldId(long tableFieldId) {
        this.tableFieldId = tableFieldId;
    }

    public long getChildTableId() {
        return childTableId;
    }

    public void setChildTableId(long childTableId) {
        this.childTableId = childTableId;
    }

    /** To-one relationship, resolved on first access. */
    public TableField getTableField() {
        long __key = this.tableFieldId;
        if (tableField__resolvedKey == null || !tableField__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TableFieldDao targetDao = daoSession.getTableFieldDao();
            TableField tableFieldNew = targetDao.load(__key);
            synchronized (this) {
                tableField = tableFieldNew;
            	tableField__resolvedKey = __key;
            }
        }
        return tableField;
    }

    public void setTableField(TableField tableField) {
        if (tableField == null) {
            throw new DaoException("To-one property 'tableFieldId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.tableField = tableField;
            tableFieldId = tableField.getId();
            tableField__resolvedKey = tableFieldId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public ChildTable getChildTable() {
        long __key = this.childTableId;
        if (childTable__resolvedKey == null || !childTable__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ChildTableDao targetDao = daoSession.getChildTableDao();
            ChildTable childTableNew = targetDao.load(__key);
            synchronized (this) {
                childTable = childTableNew;
            	childTable__resolvedKey = __key;
            }
        }
        return childTable;
    }

    public void setChildTable(ChildTable childTable) {
        if (childTable == null) {
            throw new DaoException("To-one property 'childTableId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.childTable = childTable;
            childTableId = childTable.getId();
            childTable__resolvedKey = childTableId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
