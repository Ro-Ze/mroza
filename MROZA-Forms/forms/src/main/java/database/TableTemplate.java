package database;

import java.util.List;
import database.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table TABLE_TEMPLATE.
 */
public class TableTemplate {

    private Long id;
    /** Not-null value. */
    private String name;
    private String description;
    private java.util.Date createDate;
    private boolean isArchived;
    private long programId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TableTemplateDao myDao;

    private Program program;
    private Long program__resolvedKey;

    private List<TableRow> tableRowList;
    private List<ChildTable> childTableList;

    public TableTemplate() {
    }

    public TableTemplate(Long id) {
        this.id = id;
    }

    public TableTemplate(Long id, String name, String description, java.util.Date createDate, boolean isArchived, long programId) {
        this.id = id;
        this.name = name;
        this.description = description;
        this.createDate = createDate;
        this.isArchived = isArchived;
        this.programId = programId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTableTemplateDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public java.util.Date getCreateDate() {
        return createDate;
    }

    public void setCreateDate(java.util.Date createDate) {
        this.createDate = createDate;
    }

    public boolean getIsArchived() {
        return isArchived;
    }

    public void setIsArchived(boolean isArchived) {
        this.isArchived = isArchived;
    }

    public long getProgramId() {
        return programId;
    }

    public void setProgramId(long programId) {
        this.programId = programId;
    }

    /** To-one relationship, resolved on first access. */
    public Program getProgram() {
        long __key = this.programId;
        if (program__resolvedKey == null || !program__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ProgramDao targetDao = daoSession.getProgramDao();
            Program programNew = targetDao.load(__key);
            synchronized (this) {
                program = programNew;
            	program__resolvedKey = __key;
            }
        }
        return program;
    }

    public void setProgram(Program program) {
        if (program == null) {
            throw new DaoException("To-one property 'programId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.program = program;
            programId = program.getId();
            program__resolvedKey = programId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<TableRow> getTableRowList() {
        if (tableRowList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TableRowDao targetDao = daoSession.getTableRowDao();
            List<TableRow> tableRowListNew = targetDao._queryTableTemplate_TableRowList(id);
            synchronized (this) {
                if(tableRowList == null) {
                    tableRowList = tableRowListNew;
                }
            }
        }
        return tableRowList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTableRowList() {
        tableRowList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<ChildTable> getChildTableList() {
        if (childTableList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ChildTableDao targetDao = daoSession.getChildTableDao();
            List<ChildTable> childTableListNew = targetDao._queryTableTemplate_ChildTableList(id);
            synchronized (this) {
                if(childTableList == null) {
                    childTableList = childTableListNew;
                }
            }
        }
        return childTableList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetChildTableList() {
        childTableList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
